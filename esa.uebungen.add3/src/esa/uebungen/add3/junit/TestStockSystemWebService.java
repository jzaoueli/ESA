package esa.uebungen.add3.junit;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import java.util.List;

//TODO: the following imports might need to be adapted to the packages that are actually used by your web service. Note that these are all local classes of the client project that have been generated by wsconsume
import org.dieschnittstelle.jee.esa.erp.ejbs.IndividualisedProductItem;
import org.dieschnittstelle.jee.esa.erp.ejbs.StockSystemRemote;
// the following class is the web service class created by wsconsume - the name of this class will depend on the name stated in the @WebService annotation of the server-side implementation of StockSystemRemote
import org.dieschnittstelle.jee.esa.erp.ejbs.StockSystemSingletonService;

/*
 * 
 */
public class TestStockSystemWebService {
	
	private StockSystemRemote serviceClient;
	
	
	@Before
	public void checkStockCreated() {
		// TODO instantiate the serviceClient by instantiating the generated web service class and getting the port for StockSystemRemote
		serviceClient = null;	
	}
		
	@Test
	public void stockSystemServiceWorks() {
		// read out all products
		List<IndividualisedProductItem> products = serviceClient.getAllProductsOnStock();
		assertTrue("stock exists and can be read", products.size() > 0);		
		
		// we are using the first product for the tests...
		IndividualisedProductItem testprod = products.get(0);

		// obtain the poss where the first product is available
		List<Integer> poss = serviceClient.getPointsOfSale(testprod);
		assertTrue("selected product is associated with at least one point of sale", poss.size() > 0);		
		
		// we are using the first pos for the tests...
		int testpos = poss.get(0);
		
		// obtain the local and total units
		int unitsAtPos = serviceClient.getUnitsOnStock(testprod, testpos);
		int unitsTotal = serviceClient.getTotalUnitsOnStock(testprod);
		
		// add units for the first pos
		int unitsToAdd = 5;
		serviceClient.addToStock(testprod, testpos, unitsToAdd);
		
		// compare the final units
		assertEquals("after adding units, units at pos correctly incremented", unitsAtPos + unitsToAdd, serviceClient.getUnitsOnStock(testprod, testpos));
		assertEquals("after adding units, total units correctly incremented", unitsTotal + unitsToAdd, serviceClient.getTotalUnitsOnStock(testprod));
		
		
	}
	
}
